#!/usr/bin/env python

from db import Db
from query import Query
import dateparser
import config

from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta
from optparse import OptionParser

version = 'Quasselgrep 0.1\nCopyright (c) 2013 Chris Le Sueur\nThis program is licensed under the GNU General Public License'
usage = '%prog [options] <keywords>'

def parse_args():
    parser = OptionParser(version=version, usage=usage)
    parser.add_option('--db', dest='db_type', metavar='[postgres|sqlite]',
					  help='Type of database')
    parser.add_option('--dbname', dest='db_name', metavar='NAME',
					  help='Specify the database file or name.')
    parser.add_option('--dbuser', dest='db_user', metavar='DATABASE',
					  help='PostGres user')
    parser.add_option('--dbpassword', dest='db_password', metavar='DATABASE',
					  help='PostGres password')
    parser.add_option('--dbhost', dest='db_host', metavar='HOST',
					  help='Hostname of PostGres server')
    parser.add_option('--dbport', dest='db_port', metavar='PORT',
					  help='Port of PostGres server')

    parser.add_option('-c', '--configfile', dest='config', metavar='FILE',
                  default='quasselgrep.conf', help='Location of config file')
    parser.add_option('-u', '--username', dest='username', metavar='USER',
                  help='Specify the quassel username.')
    parser.add_option('-N', '--network', dest='network', metavar='NETWORK',
                  help='Specify the network to search.')
    parser.add_option('-b', '--buffer', dest='buffer', metavar='BUFFER',
                  help='Specify the Quassel buffer (query nick or #channel) to search')
    parser.add_option('-n', '--nick', dest='sender', metavar='NICK',
                  help='Specify the nickname to search for')
    parser.add_option('-t', '--time', dest='timerange', metavar='RANGE',
                  help='Time range. See README for details.')
    return parser.parse_args()

timeparts = ('year', 'month', 'day', 'hour', 'minute', 'second')
def run():
	(options, args) = parse_args()
	config.update_options(options)
	search = args[0]

	db = Db()
	cursor = db.connect(options)

	if options.timerange:
		import parsedatetime.parsedatetime as pdt
		cal = pdt.Calendar()
		times = options.timerange.split(' to ')
		if len(times) > 1:
			fromtime = cal.parse(times[0])
			totime = cal.parse(times[1])
		else:
			#fromtime = cal.parse(times[0], datetime(2,2,2,2,2,2))[0]
			#fromtime2 = cal.parse(times[0], datetime(3,3,3,3,3,3))[0]
			fromtime = dateparser.parse(times[0], datetime(2,2,2,2,2,2)).timetuple()
			fromtime2 = dateparser.parse(times[0], datetime(3,3,3,3,3,3)).timetuple()
			print fromtime
			precision = None
			for i in range(5,-1,-1):
				if fromtime[i] != 2 or fromtime2[i] != 3:
					print i, timeparts[i]
					print fromtime[i], fromtime2[i]
					precision = i
					break

			if precision:
				now = datetime.now()
				for i in range(5,precision-1,-1):
					if timeparts[i] in ("year", "month", "day"):
						now = now.replace(**{timeparts[i] : 1})
					else:
						now = now.replace(**{timeparts[i] : 0})

				print timeparts[precision], now
				print fromtime
				print fromtime2
				fromtime = cal.parse(times[0], now)[0]
				totime = datetime(*fromtime[:6]) + relativedelta(**{timeparts[precision] + 's' : 1})
			else:
				fromtime = cal.parse(times[0])[0]
				totime = datetime.now()
		print fromtime
		print totime
		return
	query = Query(search, options.username, options.network, options.buffer, options.sender)
	results = query.run(cursor, options)
	if results:
		for res in results: print query.format(res)
	else:
		print "No results found."

if __name__ == '__main__':
	run()
